{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/Comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","components/SelectOfUsers/SelectOfUsers.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getPosts","a","fetch","response","json","getPost","postId","PostsList","React","memo","selectedUserId","selectPostId","selectedPostId","useState","postList","setPosts","useEffect","fetchPosts","posts","userId","filteredPosts","filter","post","className","map","title","id","type","onClick","getPostComments","comments","comment","removeComment","commentId","method","addComment","name","email","body","headers","JSON","stringify","NewCommentForm","fetchComments","setName","setEmail","setComment","handleSubmit","event","preventDefault","onSubmit","placeholder","value","onChange","target","required","PostDetails","setPost","setComments","visibilityOfComments","setvisibilityOfComments","fetchPost","useCallback","postItem","commentsFromServer","remove","length","commentItem","getUsers","SelectOfUsers","selectId","setSelectedUserId","users","setUsers","fetchUsers","usersFromServer","htmlFor","user","App","setSelectedPostId","selectUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75d4ea6f.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  return response.json();\n};\n\nexport const getPosts = async () => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n};\n\nexport const getPost = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport './PostsList.scss';\nimport { getPosts } from '../../api/posts';\n\ntype Props = {\n  selectedUserId: string,\n  selectPostId: (id: number) => void,\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<Props> = React\n  .memo(({ selectedUserId, selectPostId, selectedPostId }) => {\n    const [postList, setPosts] = useState<PostItem[]>([]);\n\n    useEffect(() => {\n      const fetchPosts = async () => {\n        const posts = await getPosts();\n\n        setPosts(posts);\n      };\n\n      fetchPosts();\n    }, []);\n\n    const filterPosts = (userId: number) => {\n      if (userId !== 0) {\n        return postList.filter(post => post.userId === userId);\n      }\n\n      return postList;\n    };\n\n    const filteredPosts = filterPosts(+selectedUserId);\n\n    return (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n\n        <ul className=\"PostsList__list\">\n          {filteredPosts.map(post => (\n            <li className=\"PostsList__item\" key={post.id}>\n              <div>\n                <b>{`[User #${post.userId}]:`}</b>\n                {post.title}\n              </div>\n              {selectedPostId === post.id\n                ? (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button button_close\"\n                    onClick={() => selectPostId(0)}\n                  >\n                    Close\n                  </button>\n                )\n                : (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => selectPostId(post.id)}\n                  >\n                    Open\n                  </button>\n                )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  });\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async (id: number) => {\n  const response = await fetch(`${BASE_URL}/comments`);\n\n  const comments = await response.json();\n\n  return comments.filter((comment: CommentInfo) => comment.postId === id);\n};\n\nexport const removeComment = async (commentId: number) => {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n\n  return response.json();\n};\n\nexport const addComment = async (postId: number, name: string, email: string, body:string) => {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport { addComment } from '../../api/Comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n  fetchComments: () => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({ postId, fetchComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const handleInputName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setName(value);\n  };\n\n  const handleInputEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setEmail(value);\n  };\n\n  const handleTextArea = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { value } = event.target;\n\n    setComment(value);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    await addComment(postId, name, email, comment);\n    await fetchComments();\n\n    setComment('');\n    setEmail('');\n    setName('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          value={name}\n          onChange={handleInputName}\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={handleInputEmail}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment}\n          onChange={handleTextArea}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { getPostComments, removeComment } from '../../api/Comments';\nimport { getPost } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({ selectedPostId }) => {\n  const [post, setPost] = useState<PostItem | null>(null);\n  const [comments, setComments] = useState<CommentInfo[]>([]);\n  const [visibilityOfComments, setvisibilityOfComments] = useState(true);\n\n  const fetchPost = useCallback(async () => {\n    const postItem = await getPost(selectedPostId);\n\n    setPost(postItem);\n  }, []);\n\n  const fetchComments = async () => {\n    if (post) {\n      const commentsFromServer = await getPostComments(post.id);\n\n      setComments(commentsFromServer);\n    }\n  };\n\n  const remove = async (id: number) => {\n    await removeComment(id);\n    await fetchComments();\n  };\n\n  useEffect(() => {\n    fetchPost();\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    fetchComments();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n      {comments.length > 0\n        ? (\n          <section className=\"PostDetails__comments\">\n            {visibilityOfComments && (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setvisibilityOfComments(!visibilityOfComments)}\n              >\n                {`Hide ${comments.length} comments`}\n              </button>\n            )}\n\n            {!visibilityOfComments && (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setvisibilityOfComments(!visibilityOfComments)}\n              >\n                {`Show ${comments.length} comments`}\n              </button>\n            )}\n\n            {visibilityOfComments && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(commentItem => (\n                  <li className=\"PostDetails__list-item\" key={commentItem.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => remove(commentItem.id)}\n                    >\n                      X\n                    </button>\n                    <p>{commentItem.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n        )\n        : 'No comments yet'}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          {post && (\n            <NewCommentForm postId={post.id} fetchComments={fetchComments} />\n          )}\n        </div>\n      </section>\n    </div>\n  );\n});\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport { getUsers } from '../../api/users';\n\ntype Props = {\n  selectId: (id: string) => void,\n};\n\nexport const SelectOfUsers: React.FC<Props> = React.memo(({ selectId }) => {\n  const [selectedUserId, setSelectedUserId] = useState('0');\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    };\n\n    fetchUsers();\n  }, []);\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectedUserId(value);\n    selectId(value);\n  };\n\n  return (\n    <label htmlFor=\"select\">\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        value={selectedUserId}\n        onChange={handleSelect}\n      >\n        <option value=\"0\">Choose user</option>\n        {users.map(user => (\n          <option value={user.id} key={user.id}>\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n});\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { SelectOfUsers } from './components/SelectOfUsers/SelectOfUsers';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState('0');\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectUserId = useCallback((id:string) => {\n    setSelectedUserId(id);\n  }, []);\n\n  const selectPostId = useCallback((id:number) => {\n    setSelectedPostId(id);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <SelectOfUsers selectId={selectUserId} />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectPostId={selectPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && (\n            <PostDetails selectedPostId={selectedPostId} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}